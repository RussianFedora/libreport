From b3256793135b3466b85090f081373c428cd2c571 Mon Sep 17 00:00:00 2001
From: Jiri Moskovcak <jmoskovc@redhat.com>
Date: Sun, 31 Jul 2011 14:05:02 +0200
Subject: [PATCH 1/4] warn silently if keyring is not available rhbz#725858

- we shouldn't print anything to stdout -> users understand it as a bug
  (at least when they see it in anaconda output)
- popup dialog is too "heavy", red text warning in the config dialog
  (as it was in abrt-1.x) should be enough)
---
 src/gtk-helpers/abrt-keyring.c           |   10 ++++++-
 src/gtk-helpers/event_config_dialog.c    |   36 +++++++++++++++++++++++------
 src/gtk-helpers/internal_libreport_gtk.h |    5 ++++
 3 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/gtk-helpers/abrt-keyring.c b/src/gtk-helpers/abrt-keyring.c
index 7999818..4e830ca 100644
--- a/src/gtk-helpers/abrt-keyring.c
+++ b/src/gtk-helpers/abrt-keyring.c
@@ -22,6 +22,7 @@
 
 static char *keyring_name;
 static bool got_keyring = 0;
+bool g_keyring_available = 1; //by default we assume that keyring is available
 
 guint32 find_keyring_item_id_for_event(const char *event_name)
 {
@@ -49,6 +50,10 @@ guint32 find_keyring_item_id_for_event(const char *event_name)
 
 static void abrt_keyring_load_settings(const char *event_name, event_config_t *ec)
 {
+    //don't bother when we already know that keyring is not available
+    if (!g_keyring_available)
+        return;
+
     guint item_id = find_keyring_item_id_for_event(event_name);
     if (!item_id)
         return;
@@ -81,12 +86,13 @@ static void abrt_keyring_load_settings(const char *event_name, event_config_t *e
 static void init_keyring()
 {
     /* Called again? */
-    if (got_keyring)
+    if (got_keyring || !g_keyring_available)
         return;
 
     if (!gnome_keyring_is_available())
     {
-        error_msg("Cannot connect to Gnome keyring daemon");
+        g_keyring_available = 0;
+        VERB1 error_msg("Cannot connect to Gnome keyring daemon");
         return;
     }
 
diff --git a/src/gtk-helpers/event_config_dialog.c b/src/gtk-helpers/event_config_dialog.c
index c06ba4b..430fa9b 100644
--- a/src/gtk-helpers/event_config_dialog.c
+++ b/src/gtk-helpers/event_config_dialog.c
@@ -36,7 +36,7 @@ typedef struct
     GtkWidget *widget;
 } option_widget_t;
 
-static void show_event_config_dialog(const char *event_name);
+int show_event_config_dialog(const char *event_name, GtkWindow *parent);
 
 static GtkWidget *gtk_label_new_justify_left(const gchar *label_str)
 {
@@ -211,7 +211,7 @@ static void on_configure_event_cb(GtkWidget *button, gpointer user_data)
     GtkTreeView *events_tv = (GtkTreeView *)user_data;
     char *event_name = get_event_name_from_row(events_tv);
     if (event_name != NULL)
-        show_event_config_dialog(event_name);
+        show_event_config_dialog(event_name, NULL);
     //else
     //    error_msg(_("Please select a plugin from the list to edit its options."));
 }
@@ -221,7 +221,7 @@ static void on_event_row_activated_cb(GtkTreeView *treeview, GtkTreePath *path,
     char *event_name = get_event_name_from_row(treeview);
     event_config_t *ec = get_event_config(event_name);
     if (ec->options != NULL) //We need to have some options to show
-        show_event_config_dialog(event_name);
+        show_event_config_dialog(event_name, NULL);
 }
 
 static void on_event_row_changed_cb(GtkTreeView *treeview, gpointer user_data)
@@ -285,6 +285,9 @@ static void dehydrate_config_dialog()
 
 static void save_settings_to_keyring(const char *event_name)
 {
+    //don't bother when we already know that keyring is not available
+    if (!g_keyring_available)
+        return;
     char *keyring_name = NULL;
     GnomeKeyringResult result = gnome_keyring_get_default_keyring_sync(&keyring_name);
     if (result != GNOME_KEYRING_RESULT_OK)
@@ -333,7 +336,7 @@ static void save_settings_to_keyring(const char *event_name)
     VERB2 log("saved event '%s' configuration to keyring", event_name);
 }
 
-static void show_event_config_dialog(const char *event_name)
+int show_event_config_dialog(const char *event_name, GtkWindow *parent)
 {
     if (option_widget_list != NULL)
     {
@@ -343,19 +346,21 @@ static void show_event_config_dialog(const char *event_name)
 
     event_config_t *event = get_event_config(event_name);
 
+    GtkWindow *parent_window = parent ? parent : g_event_list_window;
+
     GtkWidget *dialog = gtk_dialog_new_with_buttons(
                         /*title:*/ event->screen_name ? event->screen_name : event_name,
-                        g_event_list_window,
+                        parent_window,
                         GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                         GTK_STOCK_CANCEL,
                         GTK_RESPONSE_CANCEL,
                         GTK_STOCK_OK,
                         GTK_RESPONSE_APPLY,
                         NULL);
-    if (g_event_list_window != NULL)
+    if (parent_window != NULL)
     {
         gtk_window_set_icon_name(GTK_WINDOW(dialog),
-                gtk_window_get_icon_name(g_event_list_window));
+                gtk_window_get_icon_name(parent_window));
     }
 
     GtkWidget *option_table = gtk_table_new(/*rows*/ 0, /*cols*/ 2, /*homogeneous*/ FALSE);
@@ -364,7 +369,21 @@ static void show_event_config_dialog(const char *event_name)
 
     GtkWidget *content = gtk_dialog_get_content_area(GTK_DIALOG(dialog));
     gtk_box_pack_start(GTK_BOX(content), option_table, false, false, 20);
-    gtk_widget_show_all(option_table);
+
+    /* add warning if keyring is not available showing the nagging dialog
+     * is considered "too heavy UI" be designers
+     */
+    if (!g_keyring_available)
+    {
+        GtkWidget *keyring_warn_lbl =
+        gtk_label_new(
+          _("Gnome Keyring is not available, your settings won't be saved!"));
+        static const GdkColor red = { .red = 0xffff };
+        gtk_widget_modify_fg(keyring_warn_lbl, GTK_STATE_NORMAL, &red);
+        gtk_box_pack_start(GTK_BOX(content), keyring_warn_lbl, false, false, 0);
+    }
+
+    gtk_widget_show_all(content);
 
     int result = gtk_dialog_run(GTK_DIALOG(dialog));
     if (result == GTK_RESPONSE_APPLY)
@@ -375,6 +394,7 @@ static void show_event_config_dialog(const char *event_name)
     //else if (result == GTK_RESPONSE_CANCEL)
     //    log("log");
     gtk_widget_destroy(dialog);
+    return result;
 }
 
 void show_events_list_dialog(GtkWindow *parent)
diff --git a/src/gtk-helpers/internal_libreport_gtk.h b/src/gtk-helpers/internal_libreport_gtk.h
index ca1835f..737cd7d 100644
--- a/src/gtk-helpers/internal_libreport_gtk.h
+++ b/src/gtk-helpers/internal_libreport_gtk.h
@@ -27,6 +27,8 @@
 extern "C" {
 #endif
 
+extern bool g_keyring_available;
+
 #define make_label_autowrap_on_resize libreport_make_label_autowrap_on_resize
 void make_label_autowrap_on_resize(GtkLabel *label);
 
@@ -39,6 +41,9 @@ void load_event_config_data_from_keyring(void);
 #define find_keyring_item_id_for_event libreport_find_keyring_item_id_for_event
 guint32 find_keyring_item_id_for_event(const char *event_name);
 
+#define show_event_config_dialog libreport_show_event_config_dialog
+int show_event_config_dialog(const char *event_name, GtkWindow *parent);
+
 #ifdef __cplusplus
 }
 #endif
-- 
1.7.6

